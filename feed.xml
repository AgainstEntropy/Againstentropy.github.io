<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://alshedivat.github.io/al-folio/feed.xml" rel="self" type="application/atom+xml" /><link href="https://alshedivat.github.io/al-folio/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-05-14T07:23:50+00:00</updated><id>https://alshedivat.github.io/al-folio/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">How to solve “RuntimeError cuDNN version incompatibility”</title><link href="https://alshedivat.github.io/al-folio/blog/2023/cuDNN-incompatibility/" rel="alternate" type="text/html" title="How to solve “RuntimeError cuDNN version incompatibility”" /><published>2023-05-09T00:00:00+00:00</published><updated>2023-05-09T00:00:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2023/cuDNN-incompatibility</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2023/cuDNN-incompatibility/"><![CDATA[<h2 id="problem-setting">Problem setting</h2>

<p>When you just install a new version of PyTorch, you’d like to verify if you have installed it correctly. Typically, the following codes will be enough:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"torch version: </span><span class="si">{</span><span class="n">torch</span><span class="p">.</span><span class="n">__version__</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="n">use_cuda</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span>
<span class="k">if</span> <span class="n">use_cuda</span><span class="p">:</span>
    <span class="n">GPU_nums</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">device_count</span><span class="p">()</span>
    <span class="n">GPU</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">get_device_properties</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"There are </span><span class="si">{</span><span class="n">GPU_nums</span><span class="si">}</span><span class="s"> GPUs in total.</span><span class="se">\n</span><span class="s">The first GPU is: </span><span class="si">{</span><span class="n">GPU</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"CUDA version: </span><span class="si">{</span><span class="n">torch</span><span class="p">.</span><span class="n">version</span><span class="p">.</span><span class="n">cuda</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'cudnn version: </span><span class="si">{</span><span class="n">torch</span><span class="p">.</span><span class="n">backends</span><span class="p">.</span><span class="n">cudnn</span><span class="p">.</span><span class="nf">version</span><span class="p">()</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
<span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">device</span><span class="p">(</span><span class="sa">f</span><span class="s">"cuda:0"</span> <span class="k">if</span> <span class="n">use_cuda</span> <span class="k">else</span> <span class="s">"cpu"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Using </span><span class="si">{</span><span class="n">device</span><span class="si">}</span><span class="s"> now!"</span><span class="p">)</span>
</code></pre></div></div>

<p>Sometimes although CUDA is available, there is still something wrong with cuDNN. This maybe induce error like below:</p>

<pre><code class="language-plain">RuntimeError: cuDNN version incompatibility: PyTorch was compiled  against (8, 7, 0) but found runtime version (8, 1, 1). PyTorch already comes bundled with cuDNN. One option to resolving this error is to ensure PyTorch can find the bundled cuDNN. Looks like your LD_LIBRARY_PATH contains incompatible version of cudnn. Please either remove it from the path or install cudnn (8, 7, 0)
</code></pre>

<h2 id="problem-locating">Problem locating</h2>

<p>According to the error message, let’s print the <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> and the return may appears like below:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ $LD_LIBRARY_PATH</span>
bash: /mnt/lustre/share/cuda-11.8/lib64:/usr/local/cuda/lib:/usr/local/cuda/lib64/:...
</code></pre></div></div>

<p>Let’s check each of them. First is the CUDA path:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> /mnt/lustre/share/cuda-11.8/lib64
cmake                         libcufftw.so             libcurand.so.10.3.0.86       libnppial_static.a       libnppist.so.11.8.0.86   libnvperf_target.so
libaccinj64.so                libcufftw.so.10          libcurand_static.a           libnppicc.so             libnppist_static.a       libnvptxcompiler_static.a
libaccinj64.so.11.8           libcufftw.so.10.9.0.58   libcusolver_lapack_static.a  libnppicc.so.11          libnppisu.so             libnvrtc-builtins.so
libaccinj64.so.11.8.87        libcufftw_static.a       libcusolverMg.so             libnppicc.so.11.8.0.86   libnppisu.so.11          libnvrtc-builtins.so.11.8
libcheckpoint.so              libcufile_rdma.so        libcusolverMg.so.11          libnppicc_static.a       libnppisu.so.11.8.0.86   libnvrtc-builtins.so.11.8.89
libcublasLt.so                libcufile_rdma.so.1      libcusolverMg.so.11.4.1.48   libnppidei.so            libnppisu_static.a       libnvrtc-builtins_static.a
libcublasLt.so.11             libcufile_rdma.so.1.4.0  libcusolver.so               libnppidei.so.11         libnppitc.so             libnvrtc.so
libcublasLt.so.11.11.3.6      libcufile_rdma_static.a  libcusolver.so.11            libnppidei.so.11.8.0.86  libnppitc.so.11          libnvrtc.so.11.2
libcublasLt_static.a          libcufile.so             libcusolver.so.11.4.1.48     libnppidei_static.a      libnppitc.so.11.8.0.86   libnvrtc.so.11.8.89
libcublas.so                  libcufile.so.0           libcusolver_static.a         libnppif.so              libnppitc_static.a       libnvrtc_static.a
libcublas.so.11               libcufile.so.1.4.0       libcusparse.so               libnppif.so.11           libnpps.so               libnvToolsExt.so
libcublas.so.11.11.3.6        libcufile_static.a       libcusparse.so.11            libnppif.so.11.8.0.86    libnpps.so.11            libnvToolsExt.so.1
libcublas_static.a            libcufilt.a              libcusparse.so.11.7.5.86     libnppif_static.a        libnpps.so.11.8.0.86     libnvToolsExt.so.1.0.0
libcudadevrt.a                libcuinj64.so            libcusparse_static.a         libnppig.so              libnpps_static.a         libOpenCL.so
libcudart.so                  libcuinj64.so.11.8       liblapack_static.a           libnppig.so.11           libnvblas.so             libOpenCL.so.1
libcudart.so.11.0             libcuinj64.so.11.8.87    libmetis_static.a            libnppig.so.11.8.0.86    libnvblas.so.11          libOpenCL.so.1.0
libcudart.so.11.8.89          libculibos.a             libnppc.so                   libnppig_static.a        libnvblas.so.11.11.3.6   libOpenCL.so.1.0.0
libcudart_static.a            libcupti.so              libnppc.so.11                libnppim.so              libnvjpeg.so             libpcsamplingutil.so
libcufft.so                   libcupti.so.11.8         libnppc.so.11.8.0.86         libnppim.so.11           libnvjpeg.so.11          stubs
libcufft.so.10                libcupti.so.2022.3.0     libnppc_static.a             libnppim.so.11.8.0.86    libnvjpeg.so.11.9.0.86
libcufft.so.10.9.0.58         libcupti_static.a        libnppial.so                 libnppim_static.a        libnvjpeg_static.a
libcufft_static.a             libcurand.so             libnppial.so.11              libnppist.so             libnvperf_host.so
libcufft_static_nocallback.a  libcurand.so.10          libnppial.so.11.8.0.86       libnppist.so.11          libnvperf_host_static.a
</code></pre></div></div>

<p>and find there is no cuDNN at all. Look into the remain paths and finally we locate the imcompatible version of cuDNN:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> /usr/local/cuda/lib64
libaccinj64.so               libcudnn_cnn_infer.so.8       libcufftw.so.10.4.1.152      libnppc.so                libnppig_static.a        libnvblas.so.11.4.1.1043
libaccinj64.so.11.2          libcudnn_cnn_infer.so.8.1.1   libcufftw_static.a           libnppc.so.11             libnppim.so              libnvjpeg.so
libaccinj64.so.11.2.152      libcudnn_cnn_train.so         libcuinj64.so                libnppc.so.11.3.2.152     libnppim.so.11           libnvjpeg.so.11
libcublasLt.so               libcudnn_cnn_train.so.8       libcuinj64.so.11.2           libnppc_static.a          libnppim.so.11.3.2.152   libnvjpeg.so.11.4.0.152
libcublasLt.so.11            libcudnn_cnn_train.so.8.1.1   libcuinj64.so.11.2.152       libnppial.so              libnppim_static.a        libnvjpeg_static.a
libcublasLt.so.11.4.1.1043   libcudnn_ops_infer.so         libculibos.a                 libnppial.so.11           libnppist.so             libnvptxcompiler_static.a
libcublasLt_static.a         libcudnn_ops_infer.so.8       libcurand.so                 libnppial.so.11.3.2.152   libnppist.so.11          libnvrtc-builtins.so
libcublas.so                 libcudnn_ops_infer.so.8.1.1   libcurand.so.10              libnppial_static.a        libnppist.so.11.3.2.152  libnvrtc-builtins.so.11.2
libcublas.so.11              libcudnn_ops_train.so         libcurand.so.10.2.3.152      libnppicc.so              libnppist_static.a       libnvrtc-builtins.so.11.2.152
libcublas.so.11.4.1.1043     libcudnn_ops_train.so.8       libcurand_static.a           libnppicc.so.11           libnppisu.so             libnvrtc.so
libcublas_static.a           libcudnn_ops_train.so.8.1.1   libcusolverMg.so             libnppicc.so.11.3.2.152   libnppisu.so.11          libnvrtc.so.11.2
libcudadevrt.a               libcudnn.so                   libcusolverMg.so.11          libnppicc_static.a        libnppisu.so.11.3.2.152  libnvrtc.so.11.2.152
libcudart.so                 libcudnn.so.8                 libcusolverMg.so.11.1.0.152  libnppidei.so             libnppisu_static.a       libnvToolsExt.so
libcudart.so.11.0            libcudnn.so.8.1.1             libcusolver.so               libnppidei.so.11          libnppitc.so             libnvToolsExt.so.1
libcudart.so.11.2.152        libcudnn_static.a             libcusolver.so.11            libnppidei.so.11.3.2.152  libnppitc.so.11          libnvToolsExt.so.1.0.0
libcudart_static.a           libcudnn_static_v8.a          libcusolver.so.11.1.0.152    libnppidei_static.a       libnppitc.so.11.3.2.152  libOpenCL.so
libcudnn_adv_infer.so        libcufft.so                   libcusolver_static.a         libnppif.so               libnppitc_static.a       libOpenCL.so.1
libcudnn_adv_infer.so.8      libcufft.so.10                libcusparse.so               libnppif.so.11            libnpps.so               libOpenCL.so.1.0
libcudnn_adv_infer.so.8.1.1  libcufft.so.10.4.1.152        libcusparse.so.11            libnppif.so.11.3.2.152    libnpps.so.11            libOpenCL.so.1.0.0
libcudnn_adv_train.so        libcufft_static.a             libcusparse.so.11.4.1.1152   libnppif_static.a         libnpps.so.11.3.2.152    nvrtc-prev
libcudnn_adv_train.so.8      libcufft_static_nocallback.a  libcusparse_static.a         libnppig.so               libnpps_static.a         stubs
libcudnn_adv_train.so.8.1.1  libcufftw.so                  liblapack_static.a           libnppig.so.11            libnvblas.so
libcudnn_cnn_infer.so        libcufftw.so.10               libmetis_static.a            libnppig.so.11.3.2.152    libnvblas.so.11
</code></pre></div></div>

<h2 id="problem-solving">Problem solving</h2>

<p>Again, according to the error message, PyTorch is installed with the correct version of cuDNN bundled. To “ensure PyTorch can find the bundled cuDNN”, we need to find the bundled lib and add it to <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code>.</p>

<p>If you are using conda, the bundled lib can be found at <code class="language-plaintext highlighter-rouge">site-packages/torch/lib</code> under your environment directory:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> <span class="o">[</span>/path/to/your/conda]/envs/[env-name]/lib/python3.9/site-packages/torch/lib
libc10_cuda.so      libcublas.so.11             libcudnn_cnn_infer.so.8  libcudnn.so.8              libnvrtc-builtins.so.11.8    libtorch_cuda_linalg.so  libtorch.so
libc10.so           libcudart-d0da41ae.so.11.0  libcudnn_cnn_train.so.8  libgomp-a34b3233.so.1      libnvToolsExt-847d78f2.so.1  libtorch_cuda.so
libcaffe2_nvrtc.so  libcudnn_adv_infer.so.8     libcudnn_ops_infer.so.8  libnvfuser_codegen.so      libshm.so                    libtorch_global_deps.so
libcublasLt.so.11   libcudnn_adv_train.so.8     libcudnn_ops_train.so.8  libnvrtc-672ee683.so.11.2  libtorch_cpu.so              libtorch_python.so
</code></pre></div></div>

<p>The last thing is to modify the environment variables, i.e., add the following lines to your <code class="language-plaintext highlighter-rouge">~/.bashrc</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># cuDNN</span>
<span class="nb">export </span><span class="nv">MY_TORCH_LIB</span><span class="o">=</span><span class="s2">"[/path/to/your/conda]/envs/[env-name]/lib/python3.9/site-packages/torch/lib"</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$MY_TORCH_LIB</span>:<span class="nv">$LD_LIBRARY_PATH</span>
</code></pre></div></div>

<p>Don’t use <code class="language-plaintext highlighter-rouge">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MY_TORCH_LIB</code> becasue we want <code class="language-plaintext highlighter-rouge">$MY_TORCH_LIB</code> to have a higher priority.</p>

<p>Finally, don’t forget to call <code class="language-plaintext highlighter-rouge">source ~/.bashrc</code>, which adds the new <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> to the environment variables.</p>]]></content><author><name></name></author><category term="problem-solving" /><category term="PyTorch" /><category term="cuDNN" /><category term="Debug" /><summary type="html"><![CDATA[Problem setting]]></summary></entry><entry><title type="html">a post with table of contents on a sidebar</title><link href="https://alshedivat.github.io/al-folio/blog/2023/sidebar-table-of-contents/" rel="alternate" type="text/html" title="a post with table of contents on a sidebar" /><published>2023-04-25T14:14:00+00:00</published><updated>2023-04-25T14:14:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2023/sidebar-table-of-contents</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2023/sidebar-table-of-contents/"><![CDATA[<p>This post shows how to add a table of contents as a sidebar.</p>

<h2 id="adding-a-table-of-contents">Adding a Table of Contents</h2>

<p>To add a table of contents to a post as a sidebar, simply add</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div>
<p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post. If you wish to display the sidebar to the right, simply change <code class="language-plaintext highlighter-rouge">left</code> to <code class="language-plaintext highlighter-rouge">right</code>.</p>

<h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>

<h3 id="example-of-another-sub-heading-1">Example of another Sub-Heading 1</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>

<h2 data-toc-text="Customizing" id="customizing-your-table-of-contents">Customizing Your Table of Contents</h2>

<p>If you want to learn more about how to customize the table of contents of your sidebar, you can check the <a href="https://afeld.github.io/bootstrap-toc/">bootstrap-toc</a> documentation. Notice that you can even customize the text of the heading that will be displayed on the sidebar.</p>

<h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>

<h3 id="example-of-another-sub-heading-2">Example of another Sub-Heading 2</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="toc" /><category term="sidebar" /><summary type="html"><![CDATA[an example of a blog post with table of contents on a sidebar]]></summary></entry><entry><title type="html">How to draw chord plots in Python</title><link href="https://alshedivat.github.io/al-folio/blog/2023/chord-start/" rel="alternate" type="text/html" title="How to draw chord plots in Python" /><published>2023-04-23T00:00:00+00:00</published><updated>2023-04-23T00:00:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2023/chord-start</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2023/chord-start/"><![CDATA[<h2 id="motivation">Motivation</h2>

<p>This project is inspired by <a href="https://zhuanlan.zhihu.com/p/570940302">a chord visualization</a> of $\pi$ online, which is implemented with MATLAB:</p>

<p>&lt;img src=”../assets/img/posts/2023-04-23/pi-chord-white.png” width = 49% /&gt;
&lt;img src=”../assets/img/posts/2023-04-23/beautiful-chord.png” width = 49% /&gt;</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-23/pi-chord-white-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-23/pi-chord-white-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-23/pi-chord-white-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-23/pi-chord-white.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-23/beautiful-chord-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-23/beautiful-chord-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-23/beautiful-chord-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-23/beautiful-chord.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>Really beauiful! right? Therefore, I decided to reproduce the amazing visual effect of this plot. The first thing is to determine the technical roadmap. I searched online for existing libraries and tutorials but the most related are as below:</p>

<ol>
  <li>A libruary called <a href="https://github.com/ponnhide/pyCircos">pyCircos</a></li>
  <li>A <a href="https://zhuanlan.zhihu.com/p/56744904">post</a> on zhiuhu</li>
</ol>

<p>Their visual effect are … not exactly what I want. Therefore! I decided to build a Python library for drawing chord plots and try to record everything in detail during this project.</p>

<p>Note there are two different types of chord plots. Based on their visual characteristics, I will called them <strong>instance chord</strong> and <strong>proportion chord</strong>. The first part of this post is an implementation of instance chord, just as figures above.</p>

<h2 id="draw-some-curves">Draw some curves</h2>

<h3 id="explore-in-the-polar-coordinates">Explore in the polar coordinates</h3>

<p>It seems intuitive to draw a chord plot in the polar coordinates, so I first tried some official example codes on the matplotlib website:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">)</span>
<span class="n">theta</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">r</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">subplot_kw</span><span class="o">=</span><span class="p">{</span><span class="s">'projection'</span><span class="p">:</span> <span class="s">'polar'</span><span class="p">})</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_rmax</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_rticks</span><span class="p">([</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>  <span class="c1"># Less radial ticks
</span><span class="n">ax</span><span class="p">.</span><span class="nf">set_rlabel_position</span><span class="p">(</span><span class="o">-</span><span class="mf">22.5</span><span class="p">)</span>  <span class="c1"># Move radial labels away from plotted line
</span><span class="n">ax</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="s">"A line plot on a polar axis"</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="../assets/img/posts/2023-04-23/polar.png" alt="script-view.png" /></p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-23/polar-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-23/polar-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-23/polar-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-23/polar.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<h3 id="draw-bezier-curves">Draw bezier curves</h3>

<p>To draw those smooth curves, I guess bezier curve is a great choice. So I tried another <a href="https://matplotlib.org/stable/gallery/shapes_and_collections/quad_bezier.html">example</a> from the official doc of matplotlib to draw Bezier Curves:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib.path</span> <span class="k">as</span> <span class="n">mpath</span>
<span class="kn">import</span> <span class="n">matplotlib.patches</span> <span class="k">as</span> <span class="n">mpatches</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">Path</span> <span class="o">=</span> <span class="n">mpath</span><span class="p">.</span><span class="n">Path</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>
<span class="n">pp1</span> <span class="o">=</span> <span class="n">mpatches</span><span class="p">.</span><span class="nc">PathPatch</span><span class="p">(</span>
    <span class="nc">Path</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)],</span>
         <span class="p">[</span><span class="n">Path</span><span class="p">.</span><span class="n">MOVETO</span><span class="p">,</span> <span class="n">Path</span><span class="p">.</span><span class="n">CURVE3</span><span class="p">,</span> <span class="n">Path</span><span class="p">.</span><span class="n">CURVE3</span><span class="p">,</span> <span class="n">Path</span><span class="p">.</span><span class="n">CLOSEPOLY</span><span class="p">]),</span>
    <span class="n">fc</span><span class="o">=</span><span class="s">"none"</span><span class="p">,</span> <span class="n">transform</span><span class="o">=</span><span class="n">ax</span><span class="p">.</span><span class="n">transData</span><span class="p">)</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">add_patch</span><span class="p">(</span><span class="n">pp1</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">([</span><span class="mf">0.75</span><span class="p">],</span> <span class="p">[</span><span class="mf">0.25</span><span class="p">],</span> <span class="s">"ro"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="s">'The red point should be on the path'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="../assets/img/posts/2023-04-23/sphx_glr_quad_bezier_001_2_0x.png" alt="script-view.png" /></p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-23/sphx_glr_quad_bezier_001_2_0x-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-23/sphx_glr_quad_bezier_001_2_0x-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-23/sphx_glr_quad_bezier_001_2_0x-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-23/sphx_glr_quad_bezier_001_2_0x.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>Then I referred to the implementation of <a href="https://github.com/ponnhide/pyCircos">pyCircos</a>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">chord_plot</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">start_list</span><span class="p">,</span> <span class="n">end_list</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">0.0</span><span class="p">):</span>
    <span class="s">"""
    Visualize interrelationships between data.
    ...
    """</span>
    <span class="n">garc_id1</span> <span class="o">=</span> <span class="n">start_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">garc_id2</span> <span class="o">=</span> <span class="n">end_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">center</span> <span class="o">=</span> <span class="mi">0</span> 

    <span class="n">start1</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_garc_dict</span><span class="p">[</span><span class="n">garc_id1</span><span class="p">].</span><span class="n">coordinates</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> 
    <span class="n">end1</span>   <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_garc_dict</span><span class="p">[</span><span class="n">garc_id1</span><span class="p">].</span><span class="n">coordinates</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> 
    <span class="n">size1</span>  <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_garc_dict</span><span class="p">[</span><span class="n">garc_id1</span><span class="p">].</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="n">sstart</span> <span class="o">=</span> <span class="n">start1</span> <span class="o">+</span> <span class="p">((</span><span class="n">end1</span><span class="o">-</span><span class="n">start1</span><span class="p">)</span> <span class="o">*</span> <span class="n">start_list</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="n">size1</span><span class="p">)</span> 
    <span class="n">send</span>   <span class="o">=</span> <span class="n">start1</span> <span class="o">+</span> <span class="p">((</span><span class="n">end1</span><span class="o">-</span><span class="n">start1</span><span class="p">)</span> <span class="o">*</span> <span class="n">start_list</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="n">size1</span><span class="p">)</span>
    <span class="n">stop</span>   <span class="o">=</span> <span class="n">start_list</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> 
    
    <span class="n">start2</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_garc_dict</span><span class="p">[</span><span class="n">garc_id2</span><span class="p">].</span><span class="n">coordinates</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> 
    <span class="n">end2</span>   <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_garc_dict</span><span class="p">[</span><span class="n">garc_id2</span><span class="p">].</span><span class="n">coordinates</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> 
    <span class="n">size2</span>  <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_garc_dict</span><span class="p">[</span><span class="n">garc_id2</span><span class="p">].</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="n">ostart</span> <span class="o">=</span> <span class="n">start2</span> <span class="o">+</span> <span class="p">((</span><span class="n">end2</span><span class="o">-</span><span class="n">start2</span><span class="p">)</span> <span class="o">*</span> <span class="n">end_list</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="n">size2</span><span class="p">)</span> 
    <span class="n">oend</span>   <span class="o">=</span> <span class="n">start2</span> <span class="o">+</span> <span class="p">((</span><span class="n">end2</span><span class="o">-</span><span class="n">start2</span><span class="p">)</span> <span class="o">*</span> <span class="n">end_list</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="n">size2</span><span class="p">)</span>
    <span class="n">etop</span>   <span class="o">=</span> <span class="n">end_list</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> 

    <span class="k">if</span> <span class="n">facecolor</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">facecolor</span> <span class="o">=</span> <span class="n">Gcircle</span><span class="p">.</span><span class="n">colors</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">color_cycle</span> <span class="o">%</span> <span class="nf">len</span><span class="p">(</span><span class="n">Gcircle</span><span class="p">.</span><span class="n">colors</span><span class="p">)]</span> <span class="o">+</span> <span class="s">"80"</span> 
        <span class="n">self</span><span class="p">.</span><span class="n">color_cycle</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="n">z1</span> <span class="o">=</span> <span class="n">stop</span> <span class="o">-</span> <span class="n">stop</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="nf">abs</span><span class="p">((</span><span class="n">send</span><span class="o">-</span><span class="n">sstart</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">))</span> 
    <span class="n">z2</span> <span class="o">=</span> <span class="n">etop</span> <span class="o">-</span> <span class="n">etop</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="nf">abs</span><span class="p">((</span><span class="n">oend</span><span class="o">-</span><span class="n">ostart</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">))</span> 
    <span class="k">if</span> <span class="n">sstart</span> <span class="o">==</span> <span class="n">ostart</span><span class="p">:</span> 
        <span class="k">pass</span> 
    <span class="k">else</span><span class="p">:</span>
        <span class="n">Path</span>      <span class="o">=</span> <span class="n">mpath</span><span class="p">.</span><span class="n">Path</span>
        <span class="n">path_data</span> <span class="o">=</span> <span class="p">[(</span><span class="n">Path</span><span class="p">.</span><span class="n">MOVETO</span><span class="p">,</span>  <span class="p">(</span><span class="n">sstart</span><span class="p">,</span> <span class="n">stop</span><span class="p">)),</span>
                        <span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">CURVE3</span><span class="p">,</span>  <span class="p">(</span><span class="n">sstart</span><span class="p">,</span> <span class="n">center</span><span class="p">)),</span>     
                        <span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">CURVE3</span><span class="p">,</span>  <span class="p">(</span><span class="n">oend</span><span class="p">,</span>   <span class="n">etop</span><span class="p">)),</span>
                        <span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">CURVE3</span><span class="p">,</span>  <span class="p">((</span><span class="n">ostart</span><span class="o">+</span><span class="n">oend</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">etop</span><span class="o">+</span><span class="n">z2</span><span class="p">)),</span>
                        <span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">CURVE3</span><span class="p">,</span>  <span class="p">(</span><span class="n">ostart</span><span class="p">,</span> <span class="n">etop</span><span class="p">)),</span>
                        <span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">CURVE3</span><span class="p">,</span>  <span class="p">(</span><span class="n">ostart</span><span class="p">,</span> <span class="n">center</span><span class="p">)),</span>
                        <span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">CURVE3</span><span class="p">,</span>  <span class="p">(</span><span class="n">send</span><span class="p">,</span>   <span class="n">stop</span><span class="p">)),</span>
                        <span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">CURVE3</span><span class="p">,</span>  <span class="p">((</span><span class="n">sstart</span><span class="o">+</span><span class="n">send</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">stop</span><span class="o">+</span><span class="n">z1</span><span class="p">)),</span>
                        <span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">CURVE3</span><span class="p">,</span>  <span class="p">(</span><span class="n">sstart</span><span class="p">,</span> <span class="n">stop</span><span class="p">)),</span>
                    <span class="p">]</span>
        <span class="n">codes</span><span class="p">,</span> <span class="n">verts</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="o">*</span><span class="n">path_data</span><span class="p">))</span> 
        <span class="n">path</span>  <span class="o">=</span> <span class="n">mpath</span><span class="p">.</span><span class="nc">Path</span><span class="p">(</span><span class="n">verts</span><span class="p">,</span> <span class="n">codes</span><span class="p">)</span>
        <span class="n">patch</span> <span class="o">=</span> <span class="n">mpatches</span><span class="p">.</span><span class="nc">PathPatch</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="n">facecolor</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="n">linewidth</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="n">edgecolor</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="nf">add_patch</span><span class="p">(</span><span class="n">patch</span><span class="p">)</span>
</code></pre></div></div>

<p>I notice that the <code class="language-plaintext highlighter-rouge">path_data</code> includes some points using the <code class="language-plaintext highlighter-rouge">center</code> variable defined as <code class="language-plaintext highlighter-rouge">0</code>, I guess I can directly use the origin as the control point. I can finally draw my first Bezier Curve in a polar axis using the code below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">matplotlib.path</span>    <span class="k">as</span> <span class="n">mpath</span>
<span class="kn">import</span> <span class="n">matplotlib.patches</span> <span class="k">as</span> <span class="n">mpatches</span>

<span class="n">r</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">degrees</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">8</span><span class="p">)</span>  <span class="c1"># (0, 22.5, 45, 67.5, ...)
</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">subplot_kw</span><span class="o">=</span><span class="p">{</span><span class="s">'projection'</span><span class="p">:</span> <span class="s">'polar'</span><span class="p">})</span>
<span class="n">Path</span> <span class="o">=</span> <span class="n">mpath</span><span class="p">.</span><span class="n">Path</span>
<span class="n">path_data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">MOVETO</span><span class="p">,</span> <span class="p">(</span><span class="n">degrees</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">r</span><span class="p">)),</span>
    <span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">CURVE3</span><span class="p">,</span> <span class="p">(</span><span class="n">degrees</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">0</span><span class="p">)),</span>
    <span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">CURVE3</span><span class="p">,</span> <span class="p">(</span><span class="n">degrees</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">r</span><span class="p">)),</span>
<span class="p">]</span>
<span class="n">codes</span><span class="p">,</span> <span class="n">verts</span> <span class="o">=</span> <span class="nf">zip</span><span class="p">(</span><span class="o">*</span><span class="n">path_data</span><span class="p">)</span>
<span class="n">path</span> <span class="o">=</span> <span class="n">mpath</span><span class="p">.</span><span class="nc">Path</span><span class="p">(</span><span class="n">verts</span><span class="p">,</span> <span class="n">codes</span><span class="p">)</span>
<span class="n">patch</span> <span class="o">=</span> <span class="n">mpatches</span><span class="p">.</span><span class="nc">PathPatch</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="s">'none'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s">'r'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">add_patch</span><span class="p">(</span><span class="n">patch</span><span class="p">)</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">set_rlabel_position</span><span class="p">(</span><span class="o">-</span><span class="mf">22.5</span><span class="p">)</span>  <span class="c1"># Move radial labels away from plotted line
</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="../assets/img/posts/2023-04-23/first-bezier.png" alt="script-view.png" /></p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-23/first-bezier-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-23/first-bezier-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-23/first-bezier-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-23/first-bezier.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>We already has a nice visualization here. Now it’s time to add some styles and elements to the curve. Following XHS, we at least need to:</p>

<ol>
  <li>add two small nodes to the ends of the curve</li>
  <li>apply a gradient color to the curve</li>
</ol>

<p>To add end nodes, we only need to add two lines of codes:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">theta</span> <span class="ow">in</span> <span class="n">degrees</span><span class="p">[:</span><span class="mi">3</span><span class="p">:</span><span class="mi">2</span><span class="p">]:</span>
    <span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">'r'</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="use-color-gradient">Use color gradient</h2>

<p>To apply a gradient color, there are a lot of works to do. Since we need to use <code class="language-plaintext highlighter-rouge">matplotlib.collections.LineCollection</code> to apply different colors to different segment of the curve, all the segments are requiered with explicitly performing  bezier interpolation in Cartesian coordinates. Thus, I first repeat the above steps using Cartesian coordinates.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">r</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">degrees</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">8</span><span class="p">)</span>  <span class="c1"># (0, 22.5, 45, 67.5, ...)
</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>

<span class="c1"># convert from polar coordinates to cartesian coordinates
</span><span class="n">X</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="n">degrees</span><span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">]])</span>
<span class="n">Y</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">degrees</span><span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">]])</span>

<span class="c1"># compute the quadratic Bezier curve
</span><span class="n">t</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">t</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">*</span> <span class="n">X</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">t</span><span class="o">**</span><span class="mi">2</span> <span class="o">*</span> <span class="n">X</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">t</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">*</span> <span class="n">Y</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">t</span><span class="o">**</span><span class="mi">2</span> <span class="o">*</span> <span class="n">Y</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="c1"># split the curve into segments
</span><span class="n">route</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">stack</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># (T, 2)
</span><span class="n">idxs</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">route</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>  <span class="c1"># (0, 1, 2, ..., N-1)
</span><span class="n">norm</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nc">Normalize</span><span class="p">(</span><span class="n">idxs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">idxs</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
<span class="n">segments</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">stack</span><span class="p">([</span><span class="n">route</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">route</span><span class="p">[</span><span class="mi">1</span><span class="p">:]],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">cmap</span> <span class="o">=</span> <span class="n">mpl</span><span class="p">.</span><span class="n">colormaps</span><span class="p">[</span><span class="s">'viridis'</span><span class="p">]</span>
<span class="n">lc</span> <span class="o">=</span> <span class="nc">LineCollection</span><span class="p">(</span><span class="n">segments</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">norm</span><span class="o">=</span><span class="n">norm</span><span class="p">)</span>
<span class="n">lc</span><span class="p">.</span><span class="nf">set_array</span><span class="p">(</span><span class="n">idxs</span><span class="p">)</span>
<span class="n">lc</span><span class="p">.</span><span class="nf">set_linewidth</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">line</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="nf">add_collection</span><span class="p">(</span><span class="n">lc</span><span class="p">)</span>

<span class="c1"># draw the outer circle
</span><span class="n">circle</span> <span class="o">=</span> <span class="n">mpatches</span><span class="p">.</span><span class="nc">Circle</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">r</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'black'</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">add_artist</span><span class="p">(</span><span class="n">circle</span><span class="p">)</span>

<span class="c1"># draw two ends
</span><span class="n">cmap_ends</span> <span class="o">=</span> <span class="nf">cmap</span><span class="p">([</span><span class="mf">0.</span><span class="p">,</span> <span class="mf">1.</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="n">cmap_ends</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">set_axis_off</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlim</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="../assets/img/posts/2023-04-23/cartesian.png" alt="script-view.png" /></p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-23/cartesian-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-23/cartesian-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-23/cartesian-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-23/cartesian.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>Here I use the quadratic Bezier curves for computational efficiency. And since I use the origin as the control point ($x_1 = 0$), the formulation can be simplified as follows:</p>

\[x(t) = (1-t)^2 x_0 + 2t(1-t) x_1 + t^2 x_2 = (1-t)^2 x_0 + t^2 x_2\]

<h3 id="customize-colors">Customize colors</h3>

<p>Now I’d like to apply custom color gradients to the curve. Considering that the chord diagram is composed of many curves pointing from one color to another, I first attempted to interpolate between two given colors, such as blue and red. Thanks to <code class="language-plaintext highlighter-rouge">matplotlib.colors.LinearSegmentedColormap</code>, I can directly use two colors to create a colormap. The only thing I need to do is replace the <code class="language-plaintext highlighter-rouge">cmap</code> with the following:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">colors</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]</span>  <span class="c1"># R -&gt; B
</span><span class="n">cmap</span> <span class="o">=</span> <span class="n">LinearSegmentedColormap</span><span class="p">.</span><span class="nf">from_list</span><span class="p">(</span><span class="s">'RedBlue'</span><span class="p">,</span> <span class="n">colors</span><span class="p">,</span> <span class="n">N</span><span class="o">=</span><span class="mi">256</span><span class="p">)</span>
</code></pre></div></div>

<p>which yields below:</p>

<p><img src="../assets/img/posts/2023-04-23/RedBlue.png" alt="script-view.png" /></p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-23/RedBlue-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-23/RedBlue-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-23/RedBlue-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-23/RedBlue.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>The <code class="language-plaintext highlighter-rouge">colors</code> argument fed to <code class="language-plaintext highlighter-rouge">from_list</code> method is a list of colors, whose elements can be either tuples and strings indicating colors. An example of using strings is as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s">"darkorange"</span><span class="p">,</span> <span class="s">"gold"</span><span class="p">,</span> <span class="s">"lawngreen"</span><span class="p">,</span> <span class="s">"lightseagreen"</span><span class="p">]</span>
<span class="n">cmap</span> <span class="o">=</span> <span class="n">LinearSegmentedColormap</span><span class="p">.</span><span class="nf">from_list</span><span class="p">(</span><span class="s">'AGreatCmap'</span><span class="p">,</span> <span class="n">colors</span><span class="p">,</span> <span class="n">N</span><span class="o">=</span><span class="mi">256</span><span class="p">)</span>
</code></pre></div></div>

<p>which yields below:</p>

<p><img src="../assets/img/posts/2023-04-23/A-great-cmap.png" alt="script-view.png" /></p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-23/A-great-cmap-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-23/A-great-cmap-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-23/A-great-cmap-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-23/A-great-cmap.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<h2 id="functionality-encapsulation">Functionality Encapsulation</h2>

<p>Since I already have the basic functionality of drawing a curve with given coordinates and colors, it’s a good choice to wrap them into a class. To unify the designation, I will call the start point <strong>source</strong> and the end point <strong>target</strong>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Union</span>

<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span>  <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">matplotlib.patches</span> <span class="k">as</span> <span class="n">mpatches</span>
<span class="kn">from</span> <span class="n">matplotlib.collections</span> <span class="kn">import</span> <span class="n">LineCollection</span><span class="p">,</span> <span class="n">PathCollection</span>
<span class="kn">from</span> <span class="n">matplotlib.colors</span> <span class="kn">import</span> <span class="n">Colormap</span><span class="p">,</span> <span class="n">LinearSegmentedColormap</span>

<span class="n">CmapLike</span> <span class="o">=</span> <span class="n">Union</span><span class="p">[</span><span class="n">LinearSegmentedColormap</span><span class="p">,</span> <span class="n">Colormap</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">Chord</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">linewidth</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> 
                 <span class="n">use_outer_circle</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">divisions</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">r</span> <span class="o">=</span> <span class="n">r</span>
        <span class="n">self</span><span class="p">.</span><span class="n">lw</span> <span class="o">=</span> <span class="n">linewidth</span>
        <span class="n">self</span><span class="p">.</span><span class="n">fig</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">use_outer_circle</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">draw_circle</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_prepare_t</span><span class="p">(</span><span class="n">divisions</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="nf">set_axis_off</span><span class="p">()</span>
        <span class="n">lim</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">((</span><span class="o">-</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">))</span> <span class="o">*</span> <span class="n">r</span>
        <span class="n">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="nf">set_xlim</span><span class="p">(</span><span class="o">*</span><span class="n">lim</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="o">*</span><span class="n">lim</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_prepare_t</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">divisions</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">divsions</span> <span class="o">=</span> <span class="n">divisions</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">divisions</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">T2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">stack</span><span class="p">((</span><span class="mi">1</span><span class="o">-</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span>

    <span class="k">def</span> <span class="nf">get_cmap</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">colors</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="n">Union</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">]]]):</span>
        <span class="k">return</span> <span class="n">LinearSegmentedColormap</span><span class="p">.</span><span class="nf">from_list</span><span class="p">(</span><span class="s">'my_cmap'</span><span class="p">,</span> <span class="n">colors</span><span class="p">,</span> <span class="n">N</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">divsions</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">add_curve</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">src_tgt</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">],</span> 
                  <span class="n">cmap</span><span class="p">:</span> <span class="n">CmapLike</span><span class="p">):</span>
        <span class="c1"># polar to cartesian
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="n">src_tgt</span><span class="p">)</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">src_tgt</span><span class="p">)</span>
        <span class="n">xy</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">r</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="nf">stack</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

        <span class="c1"># compute the quadratic Bezier curve
</span>        <span class="n">XY</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">T2</span> <span class="o">@</span> <span class="n">xy</span>  <span class="c1"># (T, 2) @ (2, 2) -&gt; (T, 2)
</span>
        <span class="c1"># split the curve into segments
</span>        <span class="n">segments</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">stack</span><span class="p">([</span><span class="n">XY</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">XY</span><span class="p">[</span><span class="mi">1</span><span class="p">:]],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">idxs</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">XY</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>  <span class="c1"># (0, 1, 2, ..., T-1)
</span>        <span class="n">norm</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nc">Normalize</span><span class="p">(</span><span class="n">idxs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">idxs</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        
        <span class="n">lc</span> <span class="o">=</span> <span class="nc">LineCollection</span><span class="p">(</span><span class="n">segments</span><span class="p">,</span> <span class="n">linewidths</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">lw</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">norm</span><span class="o">=</span><span class="n">norm</span><span class="p">,</span> <span class="n">antialiaseds</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">lc</span><span class="p">.</span><span class="nf">set_array</span><span class="p">(</span><span class="n">idxs</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="nf">add_collection</span><span class="p">(</span><span class="n">lc</span><span class="p">)</span>

        <span class="c1"># draw two ends
</span>        <span class="n">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="o">*</span><span class="n">xy</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="nf">cmap</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mf">1.</span><span class="p">]))</span>
    
    <span class="k">def</span> <span class="nf">draw_circle</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># draw the outer circle
</span>        <span class="n">circle</span> <span class="o">=</span> <span class="n">mpatches</span><span class="p">.</span><span class="nc">Circle</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">r</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'black'</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="nf">add_artist</span><span class="p">(</span><span class="n">circle</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">remove_curves</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="n">collections</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">type</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="ow">in</span> <span class="p">[</span><span class="n">LineCollection</span><span class="p">,</span> <span class="n">PathCollection</span><span class="p">]:</span>
                <span class="n">c</span><span class="p">.</span><span class="nf">remove</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">get_fig</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">fig</span>
</code></pre></div></div>

<p>Now it’s much more handy to draw a chord curves:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">graph</span> <span class="o">=</span> <span class="nc">Chord</span><span class="p">()</span>
<span class="n">graph</span><span class="p">.</span><span class="nf">remove_curves</span><span class="p">()</span>

<span class="n">cmap1</span> <span class="o">=</span> <span class="n">graph</span><span class="p">.</span><span class="nf">get_cmap</span><span class="p">([</span><span class="s">'red'</span><span class="p">,</span> <span class="s">'blue'</span><span class="p">])</span>
<span class="n">graph</span><span class="p">.</span><span class="nf">add_curve</span><span class="p">(</span><span class="n">start_end</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span> <span class="o">/</span> <span class="mi">180</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap1</span><span class="p">)</span>

<span class="n">cmap2</span> <span class="o">=</span> <span class="n">graph</span><span class="p">.</span><span class="nf">get_cmap</span><span class="p">([</span><span class="s">'green'</span><span class="p">,</span> <span class="s">'gold'</span><span class="p">])</span>
<span class="n">graph</span><span class="p">.</span><span class="nf">add_curve</span><span class="p">(</span><span class="n">start_end</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">((</span><span class="o">-</span><span class="mi">45</span><span class="p">,</span> <span class="mi">210</span><span class="p">))</span> <span class="o">/</span> <span class="mi">180</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap2</span><span class="p">)</span>

<span class="n">graph</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="../assets/img/posts/2023-04-23/encapsulation.png" alt="script-view.png" /></p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-23/encapsulation-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-23/encapsulation-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-23/encapsulation-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-23/encapsulation.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>Note that I have made some optimizations in calculating the Bessel curves, hoping to speed up the drawing when there are much more curves in the graph.</p>

<h2 id="position-and-color-encoding">Position and color encoding</h2>

<p>Now I have implemented the fundamental component function of the whole project. The next step is to assign the right position and color to the given data. I will use $\pi$ in the test time. Each curve in the figure indicates that there exist two adjacent numbers in $\pi$, where the former is the number at the starting point and the latter is the number at the end point. I get the irst 10,000 digits of $\pi$ from <a href="https://www.piday.org/million/">here</a>, which is more than enough for test use.</p>

<h3 id="data-format">Data format</h3>

<p>Before using data to draw a chord plot, I need to determine how to represent and organize the data to draw in a neat manner. For convinience, I choose to store the frequncies of all combinations of two adjacent numbers with a 2-d array in <code class="language-plaintext highlighter-rouge">numpy</code>. If the categories are not numeric, they can also be indexed with 0,1,2,…,N, where N is the total numbers of categoryies.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">PI2array</span><span class="p">(</span><span class="n">ndigits</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">):</span>
    <span class="n">pi</span> <span class="o">=</span> <span class="n">PI</span><span class="p">[:</span><span class="n">ndigits</span><span class="p">]</span>
    <span class="n">array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">pi</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">pi</span><span class="p">[</span><span class="mi">1</span><span class="p">:]):</span>
        <span class="n">array</span><span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="nf">int</span><span class="p">(</span><span class="n">j</span><span class="p">)]</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">array</span>
</code></pre></div></div>

<p>By default, this function returns a statistic array of the first 100 digits of $\pi$:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nc">PI2array</span><span class="p">()</span>
<span class="nf">array</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]])</span>
</code></pre></div></div>

<p>With this data, I can determine how much space to allocate for each category. Two straightforward strategies can be used:</p>

<ul>
  <li>Evenly distributed between categories</li>
  <li>With higher frequencies, comes more space</li>
</ul>

<p>Intuitively, the total frequency of a category is the sum of the frequency of being source and being target. Although in this $\pi$ case, these two frequencies are almost the same(since the target will become source in the next pair of adjacent digits), to unify the interface I still compute the sum of them:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">compute_freq</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">:</span>
    <span class="k">assert</span> <span class="n">data</span><span class="p">.</span><span class="n">ndim</span> <span class="o">==</span> <span class="mi">2</span><span class="p">,</span> <span class="s">"data.ndim must be 2 to draw a chord plot!"</span>
    <span class="k">return</span> <span class="n">data</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>With the frequencies, I can arrange a number of nodes for each category such that e curve can randomly choose a node from the source category and a node from the target category. I divide 2 from frequency to get the number of nodes. And I’d like to add a gap between different categories. I choose a gap size of 1.5 times the node interval. All these settings can be wrapped into a function to compute the locations of nodes with given data:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">compute_locs</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">ndarray</span><span class="p">,</span> 
                 <span class="n">node_ratio</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
                 <span class="n">gap_ratio</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="n">ndarray</span><span class="p">]:</span>
    <span class="n">freq</span> <span class="o">=</span> <span class="nf">compute_freq</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">freq</span> <span class="o">=</span> <span class="p">(</span><span class="n">freq</span> <span class="o">/</span> <span class="n">node_ratio</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>

    <span class="n">freq_</span> <span class="o">=</span> <span class="p">(</span><span class="n">freq</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">gap_ratio</span>
    <span class="n">prop</span> <span class="o">=</span> <span class="n">freq_</span> <span class="o">/</span> <span class="n">freq_</span><span class="p">.</span><span class="nf">sum</span><span class="p">()</span>
    <span class="n">gap</span> <span class="o">=</span> <span class="n">gap_ratio</span> <span class="o">/</span> <span class="n">freq_</span><span class="p">.</span><span class="nf">sum</span><span class="p">()</span>
    
    <span class="n">c</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">tri</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">triu</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">ones</span><span class="p">((</span><span class="n">c</span><span class="p">,</span> <span class="n">c</span><span class="o">+</span><span class="mi">1</span><span class="p">)),</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">cprop</span> <span class="o">=</span> <span class="n">prop</span> <span class="o">@</span> <span class="n">tri</span>

    <span class="n">prop_range</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">vstack</span><span class="p">((</span><span class="n">cprop</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">cprop</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="o">-</span> <span class="n">gap</span><span class="p">)).</span><span class="n">T</span>
    <span class="n">locs</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="o">*</span><span class="n">prop_range</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">freq</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">freq</span><span class="p">))]</span>

    <span class="k">return</span> <span class="n">locs</span>
</code></pre></div></div>

<p>One can verify the above settings readily:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">locs</span> <span class="o">=</span> <span class="nf">compute_locs</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">locs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">locs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">locs</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">locs</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
<span class="p">(</span><span class="mf">0.06100179909883093</span><span class="p">,</span> <span class="mf">0.061001799098830856</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="n">locs</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">locs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">/</span> <span class="p">(</span><span class="n">locs</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">locs</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
<span class="mf">1.5000000000000027</span>
</code></pre></div></div>

<h2 id="to-be-continued">To be continued</h2>]]></content><author><name></name></author><category term="projects" /><category term="open-sources" /><category term="Vis" /><category term="Python" /><summary type="html"><![CDATA[this is a record of building an open-source libruary of drawing chord plots in Python]]></summary></entry><entry><title type="html">How to use Python in Blender</title><link href="https://alshedivat.github.io/al-folio/blog/2023/blender-script-startup/" rel="alternate" type="text/html" title="How to use Python in Blender" /><published>2023-04-22T00:00:00+00:00</published><updated>2023-04-22T00:00:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2023/blender-script-startup</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2023/blender-script-startup/"><![CDATA[<p>In this tutorial you can get some basic knowledge of writing scripts in Blender. <strong>You don’t need to have any pre-requisites other than some basic Python syntax.</strong> Our goal is pretty straightforward as following:</p>

<ol>
  <li>Add an object in the scene</li>
  <li>Modify some of the properties of the object, such as location and visibility</li>
  <li>Create an animation of the object’s movement by inserting keyframes</li>
  <li>Render this animation</li>
</ol>

<p>Follow these steps and you will obtain a sense of how to write your own scripts! I’ll also share some basic Python script templates.</p>

<h2 id="step-0-prepare-the-environment">Step 0: Prepare the environment</h2>

<p>First, open the Blender in the default mode. Click the <code class="language-plaintext highlighter-rouge">Script</code> tab to use the script view. Now we have three useful panels:</p>

<ol>
  <li><strong>Console</strong>: you can run Python codes interactively here</li>
  <li><strong>Editor</strong>: you can write lines of codes here and run them all in once</li>
  <li><strong>Info</strong>: some information will be logged here</li>
</ol>

<p>Adjust these panels in a way you like.</p>

<p><img src="../assets/img/posts/2023-04-22/script-view.png" alt="script-view.png" /></p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-22/script-view-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-22/script-view-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-22/script-view-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-22/script-view.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<h2 id="step-1-add-and-delete-objects">Step 1: Add and delete objects</h2>

<p>Now let’s begin the tutorial formally. First, we need to add an object to the scene, for instance, a block mesh. But before we indeed write the first line of code, we need to recall how we usually create an object using the GUI. Click <code class="language-plaintext highlighter-rouge">Add -&gt; Mesh -&gt; Cube</code> and we have a new object named <code class="language-plaintext highlighter-rouge">Cube.001</code> in the default collection. Now we can observe that in the <strong>Info</strong> panel the operation of adding a block is logged as a line of python code.</p>

<p><img src="../assets/img/posts/2023-04-22/info.png" alt="info.png" /></p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-22/info-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-22/info-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-22/info-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-22/info.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>This is exactly what we need, so we right-click on this message and copy it, paste it into the <strong>Console</strong>, tap the Enter button to run it. The console returns a “Finished” and we can see a new mesh named <code class="language-plaintext highlighter-rouge">Cube.002</code> was just created.</p>

<p><img src="../assets/img/posts/2023-04-22/console.png" alt="console.png" /></p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-22/console-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-22/console-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-22/console-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-22/console.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<blockquote>
    In the most of the time, if you don't know how to implement a specific function in Blender using Python script, just do it manually in the GUI once, and look for the corresponding code in the Info panel.
</blockquote>

<p>Now we have to clean up the scene since we indulge ourselves in adding too many objects we don’t actully need in the following steps. If we’d like to delete the <code class="language-plaintext highlighter-rouge">Cube</code> and <code class="language-plaintext highlighter-rouge">Cube.001</code>, in GUI we just need to click them with <code class="language-plaintext highlighter-rouge">Ctrl</code> hold and press <code class="language-plaintext highlighter-rouge">delete</code>. Great, we see a line of code just logged in the <strong>Info</strong> panel, so we just copy and run it without a hessitation. Wait wait wait, something horrible just happened. We got an error reported.</p>

<p><img src="../assets/img/posts/2023-04-22/console-error.png" alt="console-error.png" /></p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-22/console-error-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-22/console-error-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-22/console-error-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-22/console-error.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>Hope you’re not freaked out. If you are, just calm down and take a look at the error message, which reads “…, context is incorrect”. In fact, errors due to “incorrect context” are the most common ones encountered by beginners. The concept of <strong>context</strong> is almost based on GUI operations, which is something like <em>relative path</em>. When writing scripts without GUI, <strong>context</strong> is so abstract that nobody wants to touch it. We need to seek a way using <em>absolute path</em> only.</p>

<p>Now open the setting page by clicking <code class="language-plaintext highlighter-rouge">Edit -&gt; Preference -&gt; Interface</code>. In the <code class="language-plaintext highlighter-rouge">Dispaly</code> section you can see <code class="language-plaintext highlighter-rouge">Python Tooltips</code>. Check it, and welcome to a wholy new world! If you haven’t notice anything different, hover your mouse over anywhere you want to change a value.</p>

<p><img src="../assets/img/posts/2023-04-22/tooltip.png" alt="tooltip.png" /></p>
<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/posts/2023-04-22/tooltip-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/posts/2023-04-22/tooltip-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/posts/2023-04-22/tooltip-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/posts/2023-04-22/tooltip.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>These tooltips are quite useful, with them we can readily access almost any property of an object (by hoverning on the property you’d like to access in GUI). In Blender all objects are stored in a <code class="language-plaintext highlighter-rouge">dict</code> called <code class="language-plaintext highlighter-rouge">bpy.data.objects</code>. We can use the name of an object as key to access it, for example, <code class="language-plaintext highlighter-rouge">bpy.data.objects['Cube.001']</code>. Recall what we will do to delete an object:</p>

<ol>
  <li>select the object</li>
  <li>delete it</li>
</ol>

<p>Therefore, eh writing codes we follow this slightly rigid but almost same logic:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bpy</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube.001'</span><span class="p">].</span><span class="nf">select_set</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
<span class="n">bpy</span><span class="p">.</span><span class="n">ops</span><span class="p">.</span><span class="nb">object</span><span class="p">.</span><span class="nf">delete</span><span class="p">()</span>
</code></pre></div></div>

<p>Run the above codes line by line in the <strong>console</strong>, you’ll at least delete the <code class="language-plaintext highlighter-rouge">Cube.001</code> successfully. So what do I mean by “at least”? Well, if another object was also selected as well, it will also be deleted, unfortunately and innocently. Therefore, a safe practice is to deselect all objects before selecting and deleting one, which can be done by executing the following line:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bpy</span><span class="p">.</span><span class="n">ops</span><span class="p">.</span><span class="nb">object</span><span class="p">.</span><span class="nf">select_all</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="s">'DESELECT'</span><span class="p">)</span>
</code></pre></div></div>

<p>Now try to use what you have learnt to delete the <code class="language-plaintext highlighter-rouge">Cube</code>. If you mess something up, feel free to withdraw or rollback operations by using <code class="language-plaintext highlighter-rouge">Ctrl+z</code> or clicking <code class="language-plaintext highlighter-rouge">Edit -&gt; Undo History</code>.</p>

<p>At the end of Step 1, only <code class="language-plaintext highlighter-rouge">Camera</code>, <code class="language-plaintext highlighter-rouge">Cube.002</code> and <code class="language-plaintext highlighter-rouge">Light</code> should be in our scene. But if you are really lazy to delete something, just leave it to Step 2, where we will have more tricks to get it out of the way.</p>

<p>Here is the first template function to delete all the objects in a given collection:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">delete_all_in_collection</span><span class="p">(</span><span class="n">collection_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">bpy</span><span class="p">.</span><span class="n">ops</span><span class="p">.</span><span class="nb">object</span><span class="p">.</span><span class="nf">select_all</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="s">'DESELECT'</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">bpy</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">collections</span><span class="p">[</span><span class="n">collection_name</span><span class="p">].</span><span class="n">objects</span><span class="p">.</span><span class="nf">values</span><span class="p">():</span>
        <span class="n">item</span><span class="p">.</span><span class="nf">select_set</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">bpy</span><span class="p">.</span><span class="n">ops</span><span class="p">.</span><span class="nb">object</span><span class="p">.</span><span class="nf">delete</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="step-2-modify-properties-and-use-methods">Step 2: Modify properties and use methods</h2>

<p>If you have followed the steps above perfectly, our cube will have an ugly name, <code class="language-plaintext highlighter-rouge">Cube.002</code>, which is really annoying that everyone cannot wait to change it to a brief one. So type the following code in the <strong>Console</strong> and run it:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bpy</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube.002'</span><span class="p">].</span><span class="n">name</span> <span class="o">=</span> <span class="s">'Cube'</span>
<span class="c1"># or equivalently
</span><span class="n">D</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube.002'</span><span class="p">].</span><span class="n">name</span> <span class="o">=</span> <span class="s">'Cube'</span>
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre> <span class="n">bpy</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube.002'</span><span class="p">].</span><span class="n">name</span> <span class="o">=</span> <span class="s">'Cube'</span>

 <span class="c1"># or equivalently
</span>
 <span class="n">D</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube.002'</span><span class="p">].</span><span class="n">name</span> <span class="o">=</span> <span class="s">'Cube'</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>In line#1, we change the <code class="language-plaintext highlighter-rouge">name</code> property of the cube from <code class="language-plaintext highlighter-rouge">Cube.002</code> into <code class="language-plaintext highlighter-rouge">Cube</code>.
Most of the properties of an object can be accessed and modified just like this.
Line#3 also works because the console is so considerate that it defines a variable <code class="language-plaintext highlighter-rouge">D = bpy.data</code> in advance for convenient, as you can see in the logged information in your own console.</p>

<p>You may have a question now: How do I know what properties of an object I can access or modify? Well, it could be a perfect chance to introduce the most powerful part of the console, that is, <strong>interaction</strong>. The Python console is designed to be equiped with automatic prompt and completion using <code class="language-plaintext highlighter-rouge">Tab</code>.</p>

<p>Enter only <code class="language-plaintext highlighter-rouge">D.objects['Cube'].</code> in the <strong>Console</strong> and press <code class="language-plaintext highlighter-rouge">Tab</code>, we will have a complete list of, not only properties, but also methods of the object as below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">D</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube'</span><span class="p">].</span>  <span class="c1"># &lt;-Tab pressed-&gt;
</span>                      <span class="n">active_material</span>
                      <span class="n">active_material_index</span>
                      <span class="n">active_shape_key</span>
                      <span class="n">active_shape_key_index</span>
                      <span class="n">add_rest_position_attribute</span>
                      <span class="n">animation_data</span>
                      <span class="n">animation_data_clear</span><span class="p">(</span>
                      <span class="n">animation_data_create</span><span class="p">(</span>
                      <span class="n">animation_visualization</span>
                      <span class="p">...</span>
</code></pre></div></div>

<blockquote>
    Note in the above code there is a dot (.) before `Tab`. Try pressing `Tab` without the dot, you will see something different but also interesting.
</blockquote>

<p>Don’t worry if you are confused bu most of unfamiliar properties and methods of an object, becasue we are not going to do anything with them. Let’s try to find something we can understand, for example, <code class="language-plaintext highlighter-rouge">D.objects['Cube'].location</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">D</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube'</span><span class="p">].</span><span class="n">location</span>
<span class="nc">Vector</span><span class="p">((</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
</code></pre></div></div>

<p>We won’t be surprised by the returned results becasue the cube is located exactly at the origin of the world. Now I want to change its y-coordinate to 2, which can be achieved with:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">D</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube'</span><span class="p">].</span><span class="n">location</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
<span class="c1"># or equivalently
</span><span class="n">D</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube'</span><span class="p">].</span><span class="n">location</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span>
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre> <span class="n">D</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube'</span><span class="p">].</span><span class="n">location</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
 <span class="c1"># or equivalently
</span> <span class="n">D</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube'</span><span class="p">].</span><span class="n">location</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>In line#3 we are modifying the cube’s loaction on all three axises (i.e., x,y and z) at the same time. Note the <code class="language-plaintext highlighter-rouge">0, 2, 0</code> on the RHS is actually a Python tuple <code class="language-plaintext highlighter-rouge">(0, 2, 0)</code>.</p>

<p>Now it’s time to continue what we said at the end of the step 1. If there are more than 1 cube in the scene (e.g., <code class="language-plaintext highlighter-rouge">Cube.001</code>) and you are not willing to delete it mercilessly, you may want to make it “invisible” for a while instead. Thus, we can use the <code class="language-plaintext highlighter-rouge">hide_set()</code> method:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">D</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube.001'</span><span class="p">].</span><span class="nf">hide_set</span><span class="p">(</span>  <span class="c1"># &lt;-Tab pressed-&gt;
</span><span class="nf">hide_set</span><span class="p">()</span>  <span class="c1"># from here are prompts
</span><span class="n">Object</span><span class="p">.</span><span class="nf">hide_set</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">view_layer</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="n">Hide</span> <span class="n">the</span> <span class="nb">object</span> <span class="k">for</span> <span class="n">viewport</span> <span class="n">editing</span><span class="p">.</span> <span class="n">This</span> <span class="n">hiding</span> <span class="n">state</span> <span class="ow">is</span> <span class="n">per</span> <span class="n">view</span> <span class="n">layer</span>
</code></pre></div></div>

<p>Acordding to the prompts above, we know how to use <code class="language-plaintext highlighter-rouge">hide_set()</code> to make the cube invisibe:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">D</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube.001'</span><span class="p">].</span><span class="nf">hide_set</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>We see that the cube indeedly disappears from the viewport, but don’t get too excited. To avoid the cube disturbing the animation, we also need to disable it in the rendering:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">D</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="s">'Cube.001'</span><span class="p">].</span><span class="n">hide_render</span> <span class="o">=</span> <span class="bp">True</span>
</code></pre></div></div>

<p>Now you can see that the camera-shape button is off and the <code class="language-plaintext highlighter-rouge">Cube.001</code> will not appear in the rendering results.</p>

<h2 id="step-3-create-animation">Step 3: Create animation</h2>

<p>Now we have a problem that we have to face. So far we have alwasy excuting codes line by line in the console directly. But what if we would like to implement some pretty sophisticated logic with maybe 20 lines of codes, interspersed with a lot of for loops and if conditions? Blender allows us to run Python scripts writing in a <code class="language-plaintext highlighter-rouge">.py</code> file.</p>

<!-- ## Step 4: Render! -->

<h2 id="to-be-continued">To be continued</h2>]]></content><author><name></name></author><category term="tutorials" /><category term="Blender" /><category term="Python" /><summary type="html"><![CDATA[this is a start-up tutorial for scripting in Blender]]></summary></entry><entry><title type="html">displaying beautiful tables with Bootstrap Tables</title><link href="https://alshedivat.github.io/al-folio/blog/2023/tables/" rel="alternate" type="text/html" title="displaying beautiful tables with Bootstrap Tables" /><published>2023-03-20T18:37:00+00:00</published><updated>2023-03-20T18:37:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2023/tables</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2023/tables/"><![CDATA[<p>Using markdown to display tables is easy. Just use the following syntax:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Left aligned | Center aligned | Right aligned |
| :----------- | :------------: | ------------: |
| Left 1       | center 1       | right 1       |
| Left 2       | center 2       | right 2       |
| Left 3       | center 3       | right 3       |
</code></pre></div></div>

<p>That will generate:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Left aligned</th>
      <th style="text-align: center">Center aligned</th>
      <th style="text-align: right">Right aligned</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Left 1</td>
      <td style="text-align: center">center 1</td>
      <td style="text-align: right">right 1</td>
    </tr>
    <tr>
      <td style="text-align: left">Left 2</td>
      <td style="text-align: center">center 2</td>
      <td style="text-align: right">right 2</td>
    </tr>
    <tr>
      <td style="text-align: left">Left 3</td>
      <td style="text-align: center">center 3</td>
      <td style="text-align: right">right 3</td>
    </tr>
  </tbody>
</table>

<p></p>

<p>It is also possible to use HTML to display tables. For example, the following HTML code will display a table with <a href="https://bootstrap-table.com/">Bootstrap Table</a>, loaded from a JSON file:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span>
  <span class="na">id=</span><span class="s">"table"</span>
  <span class="na">data-toggle=</span><span class="s">"table"</span>
  <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div>

<table data-toggle="table" data-url="/al-folio/assets/json/table_data.json">
  <thead>
    <tr>
      <th data-field="id">ID</th>
      <th data-field="name">Item Name</th>
      <th data-field="price">Item Price</th>
    </tr>
  </thead>
</table>

<p></p>

<p>By using <a href="https://bootstrap-table.com/">Bootstrap Table</a> it is possible to create pretty complex tables, with pagination, search, and more. For example, the following HTML code will display a table, loaded from a JSON file, with pagination, search, checkboxes, and header/content alignment. For more information, check the <a href="https://examples.bootstrap-table.com/index.html">documentation</a>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span>
  <span class="na">data-click-to-select=</span><span class="s">"true"</span>
  <span class="na">data-height=</span><span class="s">"460"</span>
  <span class="na">data-pagination=</span><span class="s">"true"</span>
  <span class="na">data-search=</span><span class="s">"true"</span>
  <span class="na">data-toggle=</span><span class="s">"table"</span>
  <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-checkbox=</span><span class="s">"true"</span><span class="nt">&gt;&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span> <span class="na">data-halign=</span><span class="s">"left"</span> <span class="na">data-align=</span><span class="s">"center"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span> <span class="na">data-halign=</span><span class="s">"center"</span> <span class="na">data-align=</span><span class="s">"right"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span> <span class="na">data-halign=</span><span class="s">"right"</span> <span class="na">data-align=</span><span class="s">"left"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div>

<table data-click-to-select="true" data-height="460" data-pagination="true" data-search="true" data-toggle="table" data-url="/al-folio/assets/json/table_data.json">
  <thead>
    <tr>
      <th data-checkbox="true"></th>
      <th data-field="id" data-halign="left" data-align="center" data-sortable="true">ID</th>
      <th data-field="name" data-halign="center" data-align="right" data-sortable="true">Item Name</th>
      <th data-field="price" data-halign="right" data-align="left" data-sortable="true">Item Price</th>
    </tr>
  </thead>
</table>]]></content><author><name></name></author><category term="sample-posts" /><summary type="html"><![CDATA[an example of how to use Bootstrap Tables]]></summary></entry><entry><title type="html">a post with table of contents</title><link href="https://alshedivat.github.io/al-folio/blog/2023/table-of-contents/" rel="alternate" type="text/html" title="a post with table of contents" /><published>2023-03-20T15:59:00+00:00</published><updated>2023-03-20T15:59:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2023/table-of-contents</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2023/table-of-contents/"><![CDATA[<p>This post shows how to add a table of contents in the beginning of the post.</p>

<h2 id="adding-a-table-of-contents">Adding a Table of Contents</h2>

<p>To add a table of contents to a post, simply add</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">beginning</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div>
<p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post.</p>

<h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>

<h3 id="example-of-another-sub-heading-1">Example of another Sub-Heading 1</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>

<h2 id="table-of-contents-options">Table of Contents Options</h2>

<p>If you want to learn more about how to customize the table of contents, you can check the <a href="https://github.com/toshimaru/jekyll-toc">jekyll-toc</a> repository.</p>

<h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>

<h3 id="example-of-another-sub-heading-2">Example of another Sub-Heading 2</h3>

<p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="toc" /><summary type="html"><![CDATA[an example of a blog post with table of contents]]></summary></entry><entry><title type="html">a post with giscus comments</title><link href="https://alshedivat.github.io/al-folio/blog/2022/giscus-comments/" rel="alternate" type="text/html" title="a post with giscus comments" /><published>2022-12-10T15:59:00+00:00</published><updated>2022-12-10T15:59:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2022/giscus-comments</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2022/giscus-comments/"><![CDATA[<p>This post shows how to add GISCUS comments.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[an example of a blog post with giscus comments]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://alshedivat.github.io/al-folio/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog" /><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">a post with redirect</title><link href="https://alshedivat.github.io/al-folio/blog/2022/redirect/" rel="alternate" type="text/html" title="a post with redirect" /><published>2022-02-01T17:39:00+00:00</published><updated>2022-02-01T17:39:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2022/redirect</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2022/redirect/"><![CDATA[<p>Redirecting to another page.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[you can also redirect to assets like pdf]]></summary></entry><entry><title type="html">a post with diagrams</title><link href="https://alshedivat.github.io/al-folio/blog/2021/diagrams/" rel="alternate" type="text/html" title="a post with diagrams" /><published>2021-07-04T17:39:00+00:00</published><updated>2021-07-04T17:39:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2021/diagrams</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2021/diagrams/"><![CDATA[<p>This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin.
Below, we generate a few examples of such diagrams using languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p>

<p><strong>Note:</strong> different diagram-generation packages require external dependencies to be installed on your machine.
Also, be mindful of that because of diagram generation the fist time you build your Jekyll website after adding new diagrams will be SLOW.
For any other details, please refer to <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> README.</p>

<h2 id="mermaid">Mermaid</h2>

<p>Install mermaid using <code class="language-plaintext highlighter-rouge">node.js</code> package manager <code class="language-plaintext highlighter-rouge">npm</code> by running the following command:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> mermaid.cli
</code></pre></div></div>

<p>The diagram below was generated by the following code:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div>

<div class="jekyll-diagrams diagrams mermaid">
  <svg id="mermaid-1684049052402" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1684049052402 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1684049052402 .node circle,#mermaid-1684049052402 .node ellipse,#mermaid-1684049052402 .node polygon,#mermaid-1684049052402 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1684049052402 .node.clickable{cursor:pointer}#mermaid-1684049052402 .arrowheadPath{fill:#333}#mermaid-1684049052402 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1684049052402 .edgeLabel{background-color:#e8e8e8}#mermaid-1684049052402 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1684049052402 .cluster text{fill:#333}#mermaid-1684049052402 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1684049052402 .actor{stroke:#ccf;fill:#ececff}#mermaid-1684049052402 text.actor{fill:#000;stroke:none}#mermaid-1684049052402 .actor-line{stroke:grey}#mermaid-1684049052402 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1684049052402 .messageLine0,#mermaid-1684049052402 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1684049052402 #arrowhead{fill:#333}#mermaid-1684049052402 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1684049052402 .messageText{fill:#333;stroke:none}#mermaid-1684049052402 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1684049052402 .labelText,#mermaid-1684049052402 .loopText{fill:#000;stroke:none}#mermaid-1684049052402 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1684049052402 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1684049052402 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1684049052402 .section{stroke:none;opacity:.2}#mermaid-1684049052402 .section0{fill:rgba(102,102,255,.49)}#mermaid-1684049052402 .section2{fill:#fff400}#mermaid-1684049052402 .section1,#mermaid-1684049052402 .section3{fill:#fff;opacity:.2}#mermaid-1684049052402 .sectionTitle0,#mermaid-1684049052402 .sectionTitle1,#mermaid-1684049052402 .sectionTitle2,#mermaid-1684049052402 .sectionTitle3{fill:#333}#mermaid-1684049052402 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1684049052402 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1684049052402 .grid path{stroke-width:0}#mermaid-1684049052402 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1684049052402 .task{stroke-width:2}#mermaid-1684049052402 .taskText{text-anchor:middle;font-size:11px}#mermaid-1684049052402 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1684049052402 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1684049052402 .taskText0,#mermaid-1684049052402 .taskText1,#mermaid-1684049052402 .taskText2,#mermaid-1684049052402 .taskText3{fill:#fff}#mermaid-1684049052402 .task0,#mermaid-1684049052402 .task1,#mermaid-1684049052402 .task2,#mermaid-1684049052402 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1684049052402 .taskTextOutside0,#mermaid-1684049052402 .taskTextOutside1,#mermaid-1684049052402 .taskTextOutside2,#mermaid-1684049052402 .taskTextOutside3{fill:#000}#mermaid-1684049052402 .active0,#mermaid-1684049052402 .active1,#mermaid-1684049052402 .active2,#mermaid-1684049052402 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1684049052402 .activeText0,#mermaid-1684049052402 .activeText1,#mermaid-1684049052402 .activeText2,#mermaid-1684049052402 .activeText3{fill:#000!important}#mermaid-1684049052402 .done0,#mermaid-1684049052402 .done1,#mermaid-1684049052402 .done2,#mermaid-1684049052402 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1684049052402 .doneText0,#mermaid-1684049052402 .doneText1,#mermaid-1684049052402 .doneText2,#mermaid-1684049052402 .doneText3{fill:#000!important}#mermaid-1684049052402 .crit0,#mermaid-1684049052402 .crit1,#mermaid-1684049052402 .crit2,#mermaid-1684049052402 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1684049052402 .activeCrit0,#mermaid-1684049052402 .activeCrit1,#mermaid-1684049052402 .activeCrit2,#mermaid-1684049052402 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1684049052402 .doneCrit0,#mermaid-1684049052402 .doneCrit1,#mermaid-1684049052402 .doneCrit2,#mermaid-1684049052402 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1684049052402 .activeCritText0,#mermaid-1684049052402 .activeCritText1,#mermaid-1684049052402 .activeCritText2,#mermaid-1684049052402 .activeCritText3,#mermaid-1684049052402 .doneCritText0,#mermaid-1684049052402 .doneCritText1,#mermaid-1684049052402 .doneCritText2,#mermaid-1684049052402 .doneCritText3{fill:#000!important}#mermaid-1684049052402 .titleText{text-anchor:middle;font-size:18px;fill:#000}#mermaid-1684049052402 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1684049052402 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1684049052402 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1684049052402 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1684049052402 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1684049052402 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1684049052402 #compositionEnd,#mermaid-1684049052402 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1684049052402 #aggregationEnd,#mermaid-1684049052402 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1684049052402 #dependencyEnd,#mermaid-1684049052402 #dependencyStart,#mermaid-1684049052402 #extensionEnd,#mermaid-1684049052402 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1684049052402 .branch-label,#mermaid-1684049052402 .commit-id,#mermaid-1684049052402 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1684049052402 {
    color: rgb(0, 0, 0);
    font: normal normal 400 normal 16px / normal "Times New Roman";
  }</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[an example of a blog post with diagrams]]></summary></entry></feed>